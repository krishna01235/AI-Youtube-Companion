// getTranscript.js - Direct Innertube API only

let fetch;
let parseStringPromise;

// Initialize dependencies
async function initializeDependencies() {
  if (!fetch) {
    if (typeof globalThis !== 'undefined' && globalThis.fetch) {
      fetch = globalThis.fetch;
    } else {
      const nodeFetch = require("node-fetch");
      fetch = nodeFetch.default || nodeFetch;
    }
  }

  if (!parseStringPromise) {
    const xml2js = require("xml2js");
    parseStringPromise = xml2js.parseStringPromise;
  }
}

/**
 * Get YouTube transcript using Direct Innertube API
 */
async function getTranscript(videoUrlOrId, language = "en") {
  await initializeDependencies();
  
  const videoId = extractVideoId(videoUrlOrId);
  const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
  
  // Get API key from video page
  const response = await fetch(videoUrl);
  const html = await response.text();
  const apiKeyMatch = html.match(/"INNERTUBE_API_KEY":"([^"]+)"/);
  
  if (!apiKeyMatch) {
    throw new Error("Video unavailable or private");
  }
  
  const apiKey = apiKeyMatch[1];
  
  // Fetch player data as Android client
  const playerResponse = await fetch(`https://www.youtube.com/youtubei/v1/player?key=${apiKey}`, {
    method: "POST",
    headers: { 
      "Content-Type": "application/json",
      "User-Agent": "com.google.android.youtube/20.10.38 (Linux; U; Android 13) gzip"
    },
    body: JSON.stringify({
      context: {
        client: {
          clientName: "ANDROID",
          clientVersion: "20.10.38",
          androidSdkVersion: 33,
          osName: "Android",
          osVersion: "13",
        }
      },
      videoId
    })
  });
  
  const playerData = await playerResponse.json();
  const tracks = playerData?.captions?.playerCaptionsTracklistRenderer?.captionTracks;
  
  if (!tracks || tracks.length === 0) {
    throw new Error("No captions found");
  }
  
  // Find requested language or use first available
  let track = tracks.find(t => t.languageCode === language) || tracks[0];
  
  // Fetch caption XML
  const baseUrl = track.baseUrl.replace(/&fmt=\w+$/, "");
  const xmlResponse = await fetch(baseUrl);
  const xml = await xmlResponse.text();
  const parsed = await parseStringPromise(xml);
  
  if (!parsed?.transcript?.text) {
    throw new Error("Invalid caption format");
  }
  
  // Process transcript
  const structuredTranscript = parsed.transcript.text
    .map(entry => ({
      text: entry._ || "",
      start: parseFloat(entry.$.start || 0),
      duration: parseFloat(entry.$.dur || 0),
    }))
    .filter(entry => entry.text.trim().length > 0);
  
  const plainText = structuredTranscript
    .map(entry => entry.text)
    .join(" ")
    .replace(/\[.*?\]/g, "")
    .replace(/\s+/g, " ")
    .trim();
  
  return {
    structured: structuredTranscript,
    plainText,
    trackInfo: {
      name: track.name?.simpleText,
      language: track.languageCode,
      isAutoGenerated: track.kind === "asr"
    }
  };
}

/**
 * Extract video ID from YouTube URL
 */
function extractVideoId(videoUrlOrId) {
  if (/^[a-zA-Z0-9_-]{11}$/.test(videoUrlOrId)) {
    return videoUrlOrId;
  }
  
  try {
    const url = new URL(videoUrlOrId);
    
    if (url.hostname.includes('youtube.com')) {
      const videoId = url.searchParams.get('v');
      if (videoId) return videoId;
    }
    
    if (url.hostname.includes('youtu.be')) {
      return url.pathname.slice(1);
    }
    
    if (url.pathname.includes('/embed/')) {
      return url.pathname.split('/embed/')[1]?.split('?')[0];
    }
  } catch (err) {
    const match = videoUrlOrId.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([a-zA-Z0-9_-]{11})/);
    if (match) return match[1];
  }
  
  return videoUrlOrId;
}

module.exports = { 
  getTranscript,
  extractVideoId 
};
