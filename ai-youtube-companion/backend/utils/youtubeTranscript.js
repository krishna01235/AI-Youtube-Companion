// youtubeTranscript.js
require("dotenv").config(); // Ensure env variables are loaded
const parseStringPromise = require("xml2js").parseStringPromise;

const YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY;

/**
 * Get YouTube transcript via official YouTube API
 */
async function getTranscript(videoUrlOrId, language = "en") {
  const videoId = extractVideoId(videoUrlOrId);
  console.log(`ðŸ“¥ Transcript request for: ${videoId}`);

  if (!YOUTUBE_API_KEY) {
    throw new Error("YOUTUBE_API_KEY is not set in environment variables");
  }

  try {
    // Step 1: Get caption tracks for the video
    const captionsListUrl = `https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=${videoId}&key=${YOUTUBE_API_KEY}`;
    const captionsRes = await fetch(captionsListUrl);
    if (!captionsRes.ok) {
      throw new Error(`YouTube API captions list failed: ${captionsRes.status}`);
    }
    const captionsData = await captionsRes.json();

    const tracks = captionsData.items?.filter(
      item => item.snippet?.language === language || item.snippet?.language.startsWith(language)
    );

    if (!tracks || tracks.length === 0) {
      throw new Error("No captions found for requested language");
    }

    const track = tracks[0];

    // Step 2: Download the caption track in XML format
    const captionUrl = `https://www.googleapis.com/youtube/v3/captions/${track.id}?tfmt=ttml&key=${YOUTUBE_API_KEY}`;
    const captionRes = await fetch(captionUrl, {
      headers: { "Accept": "application/xml" }
    });

    if (!captionRes.ok) {
      throw new Error(`YouTube API caption download failed: ${captionRes.status}`);
    }

    const xml = await captionRes.text();
    const parsed = await parseStringPromise(xml);

    if (!parsed?.tt?.body?.[0]?.div?.[0]?.p) {
      throw new Error("Invalid caption XML format");
    }

    // Step 3: Process transcript
    const structuredTranscript = parsed.tt.body[0].div[0].p.map(entry => ({
      text: entry._ || "",
      start: parseFloat(entry.$?.begin?.replace("s", "")) || 0,
      duration: parseFloat(entry.$?.dur?.replace("s", "")) || 0,
    })).filter(e => e.text.trim().length > 0);

    const plainText = structuredTranscript
      .map(e => e.text)
      .join(" ")
      .replace(/\[.*?\]/g, "")
      .replace(/\s+/g, " ")
      .trim();

    return {
      structured: structuredTranscript,
      plainText,
      trackInfo: {
        name: track.snippet.name || "YouTube Caption",
        language: track.snippet.language,
        isAutoGenerated: track.snippet.trackKind === "ASR"
      }
    };
  } catch (error) {
    throw new Error(`YouTube API transcript failed: ${error.message}`);
  }
}

/**
 * Extract video ID from URL or ID
 */
function extractVideoId(videoUrlOrId) {
  if (/^[a-zA-Z0-9_-]{11}$/.test(videoUrlOrId)) return videoUrlOrId;

  try {
    const url = new URL(videoUrlOrId);
    if (url.hostname.includes("youtube.com")) return url.searchParams.get("v");
    if (url.hostname.includes("youtu.be")) return url.pathname.slice(1);
    if (url.pathname.includes("/embed/")) return url.pathname.split("/embed/")[1]?.split("?")[0];
    if (url.pathname.includes("/shorts/")) return url.pathname.split("/shorts/")[1]?.split("?")[0];
  } catch {
    const match = videoUrlOrId.match(
      /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/shorts\/)([a-zA-Z0-9_-]{11})/
    );
    if (match) return match[1];
  }
  return videoUrlOrId;
}

module.exports = { getTranscript, extractVideoId };
